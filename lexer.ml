# 3 "lexer.mll"
 
	open Keiko
	open Parser
	open Tree
	open Lexing
	exception Eof

let lineno = ref 1


# 13 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\220\255\221\255\222\255\002\000\003\000\229\255\230\255\
    \231\255\005\000\234\255\005\000\236\255\237\255\238\255\239\255\
    \240\255\241\255\000\000\000\000\002\000\001\000\005\000\006\000\
    \000\000\000\000\003\000\001\000\016\000\019\000\255\255\011\000\
    \007\000\253\255\016\000\012\000\252\255\027\000\011\000\012\000\
    \251\255\013\000\013\000\029\000\021\000\032\000\018\000\250\255\
    \033\000\242\255\021\000\249\255\034\000\248\255\021\000\021\000\
    \025\000\030\000\247\255\036\000\032\000\027\000\246\255\025\000\
    \245\255\040\000\038\000\046\000\244\255\243\255\223\255\232\255\
    \225\255\226\255\224\255\138\000\252\255\253\255\254\255\037\000\
    \255\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\028\000\027\000\255\255\255\255\
    \255\255\022\000\255\255\020\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\001\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\
    \255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\000\000\255\255\255\255\000\000\000\000\
    \000\000\255\255\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\000\000\255\255\255\255\000\000\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \255\255\000\000\255\255\000\000\255\255\000\000\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\000\000\255\255\
    \000\000\255\255\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\077\000\000\000\000\000\000\000\255\255\
    \000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\030\000\003\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \011\000\010\000\006\000\008\000\016\000\007\000\017\000\070\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\012\000\013\000\005\000\009\000\004\000\074\000\
    \072\000\073\000\071\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\027\000\080\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\050\000\034\000\026\000\023\000\025\000\069\000\063\000\
    \065\000\018\000\054\000\052\000\041\000\028\000\020\000\037\000\
    \021\000\031\000\022\000\059\000\032\000\033\000\024\000\019\000\
    \042\000\035\000\036\000\015\000\038\000\014\000\039\000\040\000\
    \048\000\043\000\044\000\045\000\046\000\047\000\049\000\051\000\
    \053\000\055\000\056\000\057\000\058\000\060\000\061\000\062\000\
    \064\000\066\000\067\000\068\000\078\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\079\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\076\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\
    \005\000\005\000\009\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\000\000\079\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\024\000\027\000\000\000\000\000\000\000\018\000\020\000\
    \019\000\000\000\022\000\023\000\025\000\000\000\000\000\026\000\
    \000\000\028\000\000\000\021\000\031\000\032\000\000\000\000\000\
    \025\000\034\000\035\000\000\000\037\000\000\000\038\000\039\000\
    \041\000\042\000\043\000\044\000\045\000\046\000\048\000\050\000\
    \052\000\054\000\055\000\056\000\057\000\059\000\060\000\061\000\
    \063\000\065\000\066\000\067\000\075\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\075\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\075\000";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 15 "lexer.mll"
               (token lexbuf)
# 174 "lexer.ml"

  | 1 ->
let
# 16 "lexer.mll"
                 s
# 180 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 16 "lexer.mll"
                     ( NUMBER (int_of_string s) )
# 184 "lexer.ml"

  | 2 ->
# 17 "lexer.mll"
            ( MAIN )
# 189 "lexer.ml"

  | 3 ->
# 18 "lexer.mll"
            ( MAIN )
# 194 "lexer.ml"

  | 4 ->
# 19 "lexer.mll"
             ( CLASS )
# 199 "lexer.ml"

  | 5 ->
# 20 "lexer.mll"
               ( EXTENDS )
# 204 "lexer.ml"

  | 6 ->
# 21 "lexer.mll"
            ( VAR )
# 209 "lexer.ml"

  | 7 ->
# 22 "lexer.mll"
            ( DEF )
# 214 "lexer.ml"

  | 8 ->
# 23 "lexer.mll"
               ( RETURN )
# 219 "lexer.ml"

  | 9 ->
# 24 "lexer.mll"
              ( PRINT )
# 224 "lexer.ml"

  | 10 ->
# 25 "lexer.mll"
            ( NEW )
# 229 "lexer.ml"

  | 11 ->
# 26 "lexer.mll"
             ( WHILE )
# 234 "lexer.ml"

  | 12 ->
# 27 "lexer.mll"
           ( IF )
# 239 "lexer.ml"

  | 13 ->
# 28 "lexer.mll"
            ( ELSE )
# 244 "lexer.ml"

  | 14 ->
# 29 "lexer.mll"
          ( DOT )
# 249 "lexer.ml"

  | 15 ->
# 30 "lexer.mll"
          ( COMMNA )
# 254 "lexer.ml"

  | 16 ->
# 31 "lexer.mll"
          ( LCURL )
# 259 "lexer.ml"

  | 17 ->
# 32 "lexer.mll"
          ( RCURL )
# 264 "lexer.ml"

  | 18 ->
# 33 "lexer.mll"
          ( SEMI )
# 269 "lexer.ml"

  | 19 ->
# 34 "lexer.mll"
          ( COLON )
# 274 "lexer.ml"

  | 20 ->
# 35 "lexer.mll"
          ( LBRAC )
# 279 "lexer.ml"

  | 21 ->
# 36 "lexer.mll"
          ( RBRAC )
# 284 "lexer.ml"

  | 22 ->
# 37 "lexer.mll"
          ( ASSIGN )
# 289 "lexer.ml"

  | 23 ->
# 38 "lexer.mll"
           ( RELOP Eq )
# 294 "lexer.ml"

  | 24 ->
# 39 "lexer.mll"
          ( ADDOP Plus )
# 299 "lexer.ml"

  | 25 ->
# 40 "lexer.mll"
          ( MINUS )
# 304 "lexer.ml"

  | 26 ->
# 41 "lexer.mll"
          ( MULOP Times )
# 309 "lexer.ml"

  | 27 ->
# 42 "lexer.mll"
          ( RELOP Lt )
# 314 "lexer.ml"

  | 28 ->
# 43 "lexer.mll"
          ( RELOP Gt )
# 319 "lexer.ml"

  | 29 ->
# 44 "lexer.mll"
           ( RELOP Neq )
# 324 "lexer.ml"

  | 30 ->
# 45 "lexer.mll"
           ( RELOP Leq )
# 329 "lexer.ml"

  | 31 ->
# 46 "lexer.mll"
           ( RELOP Geq )
# 334 "lexer.ml"

  | 32 ->
# 47 "lexer.mll"
           ( comment lexbuf; token lexbuf )
# 339 "lexer.ml"

  | 33 ->
# 48 "lexer.mll"
           ( incr lineno; Source.note_line !lineno lexbuf; token lexbuf )
# 344 "lexer.ml"

  | 34 ->
# 49 "lexer.mll"
           ( EOF )
# 349 "lexer.ml"

  | 35 ->
# 50 "lexer.mll"
         ( BADTOK )
# 354 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
    __ocaml_lex_comment_rec lexbuf 75
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 53 "lexer.mll"
           ( () )
# 366 "lexer.ml"

  | 1 ->
# 54 "lexer.mll"
            ( incr lineno; Source.note_line; !lineno lexbuf; comment lexbuf )
# 371 "lexer.ml"

  | 2 ->
# 55 "lexer.mll"
         ( comment lexbuf )
# 376 "lexer.ml"

  | 3 ->
# 56 "lexer.mll"
           ( () )
# 381 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

